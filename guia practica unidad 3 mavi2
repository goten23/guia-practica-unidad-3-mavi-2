#include <iostream>
#include <Box2D/Box2D.h>

const float32 WORLD_WIDTH = 100.0f;
const float32 WORLD_HEIGHT = 100.0f;
const float32 BALL_RADIUS = 5.0f;

int main() {
    b2Vec2 gravity(0.0f, -9.8f);
    b2World world(gravity);

    // Crear bordes del mundo
    b2BodyDef groundBodyDef;
    b2Body* groundBody = world.CreateBody(&groundBodyDef);

    b2EdgeShape groundBox;
    groundBox.Set(b2Vec2(0.0f, 0.0f), b2Vec2(WORLD_WIDTH, 0.0f)); // Suelo
    groundBody->CreateFixture(&groundBox, 0.0f);

    groundBox.Set(b2Vec2(0.0f, WORLD_HEIGHT), b2Vec2(WORLD_WIDTH, WORLD_HEIGHT)); // Techo
    groundBody->CreateFixture(&groundBox, 0.0f);

    groundBox.Set(b2Vec2(0.0f, 0.0f), b2Vec2(0.0f, WORLD_HEIGHT)); // Borde izquierdo
    groundBody->CreateFixture(&groundBox, 0.0f);

    groundBox.Set(b2Vec2(WORLD_WIDTH, 0.0f), b2Vec2(WORLD_WIDTH, WORLD_HEIGHT)); // Borde derecho
    groundBody->CreateFixture(&groundBox, 0.0f);

    // Crear la pelota
    b2BodyDef ballBodyDef;
    ballBodyDef.type = b2_dynamicBody;
    ballBodyDef.position.Set(WORLD_WIDTH / 2.0f, WORLD_HEIGHT / 2.0f);
    b2Body* ballBody = world.CreateBody(&ballBodyDef);

    b2CircleShape ballShape;
    ballShape.m_radius = BALL_RADIUS;

    b2FixtureDef fixtureDef;
    fixtureDef.shape = &ballShape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    fixtureDef.restitution = 1.0f; // Elasticidad
    ballBody->CreateFixture(&fixtureDef);

    // Simulación del mundo
    for (int32 i = 0; i < 600; ++i) { // Simulación más larga
        world.Step(1.0f / 60.0f, 6, 2);
        b2Vec2 position = ballBody->GetPosition();
        std::cout << "Posición de la pelota en el paso " << i << ": x=" << position.x << ", y=" << position.y << std::endl;
    }

    return 0;
}
#include <iostream>
#include <Box2D/Box2D.h>
#include <SDL2/SDL.h>

const float32 WORLD_WIDTH = 100.0f;
const float32 WORLD_HEIGHT = 100.0f;
const float32 BALL_RADIUS = 5.0f;

int main(int argc, char* argv[]) {
    // Inicialización de SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL_Init Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Simulación de Pelotas con Resorte",
                                          100, 100, 800, 600, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cerr << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        SDL_DestroyWindow(window);
        std::cerr << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    // Inicialización de Box2D
    b2Vec2 gravity(0.0f, -9.8f);
    b2World world(gravity);

    // Crear las pelotas
    b2BodyDef ballBodyDef;
    ballBodyDef.type = b2_dynamicBody;

    ballBodyDef.position.Set(WORLD_WIDTH / 2.0f - 10.0f, WORLD_HEIGHT / 2.0f);
    b2Body* ballBody1 = world.CreateBody(&ballBodyDef);
    b2CircleShape ballShape;
    ballShape.m_radius = BALL_RADIUS;
    b2FixtureDef fixtureDef;
    fixtureDef.shape = &ballShape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    fixtureDef.restitution = 0.5f;
    ballBody1->CreateFixture(&fixtureDef);

    ballBodyDef.position.Set(WORLD_WIDTH / 2.0f + 10.0f, WORLD_HEIGHT / 2.0f);
    b2Body* ballBody2 = world.CreateBody(&ballBodyDef);
    ballBody2->CreateFixture(&fixtureDef);

    // Crear el resorte
    b2DistanceJointDef jointDef;
    jointDef.bodyA = ballBody1;
    jointDef.bodyB = ballBody2;
    jointDef.length = 20.0f;
    jointDef.frequencyHz = 2.0f;
    jointDef.dampingRatio = 0.5f;
    world.CreateJoint(&jointDef);

    bool quit = false;
    SDL_Event e;
    bool mouseJointActive = false;
    b2MouseJoint* mouseJoint = nullptr;
    b2Body* selectedBody = nullptr;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            } else if (e.type == SDL_MOUSEBUTTONDOWN) {
                if (e.button.button == SDL_BUTTON_LEFT) {
                    int mouseX, mouseY;
                    SDL_GetMouseState(&mouseX, &mouseY);
                    float32 worldMouseX = mouseX * (WORLD_WIDTH / 800.0f);
                    float32 worldMouseY = WORLD_HEIGHT - mouseY * (WORLD_HEIGHT / 600.0f);

                    b2Vec2 mousePos(worldMouseX, worldMouseY);
                    for (b2Body* body : {ballBody1, ballBody2}) {
                        if (body->GetFixtureList()->TestPoint(mousePos)) {
                            selectedBody = body;
                            break;
                        }
                    }

                    if (selectedBody) {
                        b2MouseJointDef mouseJointDef;
                        mouseJointDef.bodyA = groundBody;
                        mouseJointDef.bodyB = selectedBody;
                        mouseJointDef.target = mousePos;
                        mouseJointDef.maxForce = 1000.0f * selectedBody->GetMass();
                        mouseJoint = (b2MouseJoint*)world.CreateJoint(&mouseJointDef);
                        selectedBody->SetAwake(true);
                        mouseJointActive = true;
                    }
                }
            } else if (e.type == SDL_MOUSEBUTTONUP) {
                if (e.button.button == SDL_BUTTON_LEFT) {
                    if (mouseJoint) {
                        world.DestroyJoint(mouseJoint);
                        mouseJoint = nullptr;
                        mouseJointActive = false;
                        selectedBody = nullptr;
                    }
                }
            } else if (e.type == SDL_MOUSEMOTION) {
                if (mouseJoint) {
                    int mouseX, mouseY;
                    SDL_GetMouseState(&mouseX, &mouseY);
                    float32 worldMouseX = mouseX * (WORLD_WIDTH / 800.0f);
                    float32 worldMouseY = WORLD_HEIGHT - mouseY * (WORLD_HEIGHT / 600.0f);
                    mouseJoint->SetTarget(b2Vec2(worldMouseX, worldMouseY));
                }
            }
        }

        world.Step(1.0f / 60.0f, 6, 2);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);

        b2Vec2 position1 = ballBody1->GetPosition();
        b2Vec2 position2 = ballBody2->GetPosition();

        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_Rect ballRect1 = { (int)(position1.x * 800.0f / WORLD_WIDTH) - (int)BALL_RADIUS,
                               (int)(600 - position1.y * 600.0f / WORLD_HEIGHT) - (int)BALL_RADIUS,
                               (int)(2 * BALL_RADIUS), (int)(2 * BALL_RADIUS) };
        SDL_RenderFillRect(renderer, &ballRect1);

        SDL_Rect ballRect2 = { (int)(position2.x * 800.0f / WORLD_WIDTH) - (int)BALL_RADIUS,
                               (int)(600 - position2.y * 600.0f / WORLD_HEIGHT) - (int)BALL_RADIUS,
                               (int)(2 * BALL_RADIUS), (int)(2 * BALL_RADIUS) };
        SDL_RenderFillRect(renderer, &ballRect2);

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderDrawLine(renderer,
                           (int)(position1.x * 800.0f / WORLD_WIDTH), (int)(600 - position1.y * 600.0f / WORLD_HEIGHT),
                           (int)(position2.x * 800.0f / WORLD_WIDTH), (int)(600 - position2.y * 600.0f / WORLD_HEIGHT));

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
#include <iostream>
#include <Box2D/Box2D.h>
#include <SDL2/SDL.h>

const float32 WORLD_WIDTH = 100.0f;
const float32 WORLD_HEIGHT = 100.0f;
const float32 BALL_RADIUS = 5.0f;
const float32 PIVOT_X = WORLD_WIDTH / 2.0f;
const float32 PIVOT_Y = WORLD_HEIGHT / 2.0f;

int main(int argc, char* argv[]) {
    // Inicialización de SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL_Init Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Pelota Fijada a un Objeto Fijo",
                                          100, 100, 800, 600, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cerr << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        SDL_DestroyWindow(window);
        std::cerr << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    // Inicialización de Box2D
    b2Vec2 gravity(0.0f, -9.8f);
    b2World world(gravity);

    // Crear el suelo (objeto fijo)
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(PIVOT_X, PIVOT_Y);
    b2Body* groundBody = world.CreateBody(&groundBodyDef);

    // Crear la pelota
    b2BodyDef ballBodyDef;
    ballBodyDef.type = b2_dynamicBody;
    ballBodyDef.position.Set(PIVOT_X, PIVOT_Y + 10.0f);
    b2Body* ballBody = world.CreateBody(&ballBodyDef);

    b2CircleShape ballShape;
    ballShape.m_radius = BALL_RADIUS;

    b2FixtureDef fixtureDef;
    fixtureDef.shape = &ballShape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    fixtureDef.restitution = 0.5f;
    ballBody->CreateFixture(&fixtureDef);

    // Crear el resorte (Revolute Joint)
    b2RevoluteJointDef jointDef;
    jointDef.bodyA = groundBody;
    jointDef.bodyB = ballBody;
    jointDef.localAnchorA.Set(0, 0); // El pivote está en el centro del objeto fijo
    jointDef.localAnchorB.Set(0, -10.0f); // La pelota está a 10 unidades de distancia
    jointDef.collideConnected = false;
    world.CreateJoint(&jointDef);

    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
        }

        world.Step(1.0f / 60.0f, 6, 2);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);

        b2Vec2 position = ballBody->GetPosition();

        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_Rect ballRect = { (int)(position.x * 800.0f / WORLD_WIDTH) - (int)BALL_RADIUS,
                              (int)(600 - position.y * 600.0f / WORLD_HEIGHT) - (int)BALL_RADIUS,
                              (int)(2 * BALL_RADIUS), (int)(2 * BALL_RADIUS) };
        SDL_RenderFillRect(renderer, &ballRect);

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderDrawLine(renderer,
                           (int)(PIVOT_X * 800.0f / WORLD_WIDTH), (int)(600 - PIVOT_Y * 600.0f / WORLD_HEIGHT),
                           (int)(position.x * 800.0f / WORLD_WIDTH), (int)(600 - position.y * 600.0f / WORLD_HEIGHT));

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
#include <iostream>
#include <Box2D/Box2D.h>
#include <SDL2/SDL.h>

const float32 WORLD_WIDTH = 100.0f;
const float32 WORLD_HEIGHT = 100.0f;
const float32 SQUARE_SIZE = 5.0f;
const float32 FORCE_AMOUNT = 50.0f;

int main(int argc, char* argv[]) {
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL_Init Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Cuadrado Movido por Fuerza",
                                          100, 100, 800, 600, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cerr << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        SDL_DestroyWindow(window);
        std::cerr << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    b2Vec2 gravity(0.0f, 0.0f);
    b2World world(gravity);

    b2BodyDef squareBodyDef;
    squareBodyDef.type = b2_dynamicBody;
    squareBodyDef.position.Set(WORLD_WIDTH / 2.0f, WORLD_HEIGHT / 2.0f);
    b2Body* squareBody = world.CreateBody(&squareBodyDef);

    b2PolygonShape squareShape;
    squareShape.SetAsBox(SQUARE_SIZE / 2.0f, SQUARE_SIZE / 2.0f);

    b2FixtureDef fixtureDef;
    fixtureDef.shape = &squareShape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    fixtureDef.restitution = 0.5f;
    squareBody->CreateFixture(&fixtureDef);

    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            } else if (e.type == SDL_KEYDOWN) {
                switch (e.key.keysym.sym) {
                    case SDLK_UP:
                        squareBody->ApplyForceToCenter(b2Vec2(0, FORCE_AMOUNT), true);
                        break;
                    case SDLK_DOWN:
                        squareBody->ApplyForceToCenter(b2Vec2(0, -FORCE_AMOUNT), true);
                        break;
                    case SDLK_LEFT:
                        squareBody->ApplyForceToCenter(b2Vec2(-FORCE_AMOUNT, 0), true);
                        break;
                    case SDLK_RIGHT:
                        squareBody->ApplyForceToCenter(b2Vec2(FORCE_AMOUNT, 0), true);
                        break;
                }
            }
        }

        world.Step(1.0f / 60.0f, 6, 2);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);

        b2Vec2 position = squareBody->GetPosition();
        float32 angle = squareBody->GetAngle();

        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_Rect squareRect = { (int)(position.x * 800.0f / WORLD_WIDTH) - (int)(SQUARE_SIZE / 2),
                                (int)(600 - position.y * 600.0f / WORLD_HEIGHT) - (int)(SQUARE_SIZE / 2),
                                (int)SQUARE_SIZE, (int)SQUARE_SIZE };
        SDL_RenderFillRect(renderer, &squareRect);

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
#include <iostream>
#include <Box2D/Box2D.h>
#include <SDL2/SDL.h>

const float32 WORLD_WIDTH = 100.0f;
const float32 WORLD_HEIGHT = 100.0f;
const float32 SCALE = 10.0f;

void CreateBox(b2World& world, float32 x, float32 y, float32 hx, float32 hy, bool dynamic = true) {
    b2BodyDef bodyDef;
    if (dynamic)
        bodyDef.type = b2_dynamicBody;
    bodyDef.position.Set(x, y);
    b2Body* body = world.CreateBody(&bodyDef);

    b2PolygonShape shape;
    shape.SetAsBox(hx, hy);

    b2FixtureDef fixtureDef;
    fixtureDef.shape = &shape;
    fixtureDef.density = 1.0f;
    fixtureDef.friction = 0.3f;
    fixtureDef.restitution = 0.5f;
    body->CreateFixture(&fixtureDef);
}

void CreateJoint(b2World& world, b2Body* bodyA, b2Body* bodyB, float32 anchorAX, float32 anchorAY, float32 anchorBX, float32 anchorBY) {
    b2RevoluteJointDef jointDef;
    jointDef.bodyA = bodyA;
    jointDef.bodyB = bodyB;
    jointDef.localAnchorA.Set(anchorAX, anchorAY);
    jointDef.localAnchorB.Set(anchorBX, anchorBY);
    jointDef.collideConnected = false;
    world.CreateJoint(&jointDef);
}

int main(int argc, char* argv[]) {
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "SDL_Init Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Ragdoll",
                                          100, 100, 800, 600, SDL_WINDOW_SHOWN);
    if (window == nullptr) {
        std::cerr << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        SDL_DestroyWindow(window);
        std::cerr << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    b2Vec2 gravity(0.0f, -9.8f);
    b2World world(gravity);

    // Crear partes del ragdoll
    // Cabeza
    b2BodyDef headDef;
    headDef.type = b2_dynamicBody;
    headDef.position.Set(WORLD_WIDTH / 2.0f, WORLD_HEIGHT / 2.0f + 5.0f);
    b2Body* head = world.CreateBody(&headDef);
    b2CircleShape headShape;
    headShape.m_radius = 1.0f;
    b2FixtureDef headFixtureDef;
    headFixtureDef.shape = &headShape;
    headFixtureDef.density = 1.0f;
    headFixtureDef.friction = 0.3f;
    headFixtureDef.restitution = 0.5f;
    head->CreateFixture(&headFixtureDef);

    // Torso
    b2BodyDef torsoDef;
    torsoDef.type = b2_dynamicBody;
    torsoDef.position.Set(WORLD_WIDTH / 2.0f, WORLD_HEIGHT / 2.0f);
    b2Body* torso = world.CreateBody(&torsoDef);
    b2PolygonShape torsoShape;
    torsoShape.SetAsBox(1.5f, 2.0f);
    b2FixtureDef torsoFixtureDef;
    torsoFixtureDef.shape = &torsoShape;
    torsoFixtureDef.density = 1.0f;
    torsoFixtureDef.friction = 0.3f;
    torsoFixtureDef.restitution = 0.5f;
    torso->CreateFixture(&torsoFixtureDef);

    // Brazos
    b2Body* leftArm = nullptr;
    b2Body* rightArm = nullptr;
    {
        b2BodyDef armDef;
        armDef.type = b2_dynamicBody;
        armDef.position.Set(WORLD_WIDTH / 2.0f - 2.5f, WORLD_HEIGHT / 2.0f);
        leftArm = world.CreateBody(&armDef);
        armDef.position.Set(WORLD_WIDTH / 2.0f + 2.5f, WORLD_HEIGHT / 2.0f);
        rightArm = world.CreateBody(&armDef);

        b2PolygonShape armShape;
        armShape.SetAsBox(0.5f, 1.5f);

        b2FixtureDef armFixtureDef;
        armFixtureDef.shape = &armShape;
        armFixtureDef.density = 1.0f;
        armFixtureDef.friction = 0.3f;
        armFixtureDef.restitution = 0.5f;

        leftArm->CreateFixture(&armFixtureDef);
        rightArm->CreateFixture(&armFixtureDef);
    }

    // Piernas
    b2Body* leftLeg = nullptr;
    b2Body* rightLeg = nullptr;
    {
        b2BodyDef legDef;
        legDef.type = b2_dynamicBody;
        legDef.position.Set(WORLD_WIDTH / 2.0f - 1.0f, WORLD_HEIGHT / 2.0f - 4.0f);
        leftLeg = world.CreateBody(&legDef);
        legDef.position.Set(WORLD_WIDTH / 2.0f + 1.0f, WORLD_HEIGHT / 2.0f - 4.0f);
        rightLeg = world.CreateBody(&legDef);

        b2PolygonShape legShape;
        legShape.SetAsBox(0.75f, 2.0f);

        b2FixtureDef legFixtureDef;
        legFixtureDef.shape = &legShape;
        legFixtureDef.density = 1.0f;
        legFixtureDef.friction = 0.3f;
        legFixtureDef.restitution = 0.5f;

        leftLeg->CreateFixture(&legFixtureDef);
        rightLeg->CreateFixture(&legFixtureDef);
    }

    // Crear las juntas
    CreateJoint(world, head, torso, 0, -1.0f, 0, 2.0f);
    CreateJoint(world, leftArm, torso, 0.5f, -1.5f, 1.5f, 1.0f);
    CreateJoint(world, rightArm, torso, -0.5f, -1.5f, -1.5f, 1.0f);
    CreateJoint(world, leftLeg, torso, 0.5f, -2.0f, 1.0f, -2.0f);
    CreateJoint(world, rightLeg, torso, -0.5f, -2.0f, -1.0f, -2.0f);

    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
        }

        world.Step(1.0f / 60.0f, 6, 2);

        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);

        auto drawBody = [&](b2Body* body) {
            for (b2Fixture* f = body->GetFixtureList(); f; f = f->GetNext()) {
                if (f->GetType() == b2Shape::e_polygon) {
                    b2PolygonShape* poly = (b2PolygonShape*)f->GetShape();
                    for (int i = 0; i < poly->m_count; ++i) {
                        b2Vec2 point = body->GetWorldPoint(poly->m_vertices[i]);
                        SDL_Rect rect = {
                            (int)(point.x * 800.0f / WORLD_WIDTH),
                            (int)(600 - point.y * 600.0f / WORLD_HEIGHT),
                            2, 2
                        };
                        SDL_RenderFillRect(renderer, &rect);
                    }
                } else if (f->GetType() == b2Shape::e_circle) {
                    b2CircleShape* circle = (b2CircleShape*)f->GetShape();
                    b2Vec2 point = body->GetWorldPoint(circle->m_p);
                    SDL_Rect rect = {
                        (int)(point.x * 800.0f / WORLD_WIDTH) - (int)circle->m_radius,
                        (int)(600 - point.y * 600.0f / WORLD_HEIGHT) - (int)circle->m_radius,
                        (int)circle->m_radius * 2, (int)circle->m_radius * 2
                    };
                    SDL_RenderFillRect(renderer, &rect);
                }
            }
        };

        drawBody(head);
        drawBody(torso);
        drawBody(leftArm);
        drawBody(rightArm);
        drawBody(leftLeg);
        drawBody(rightLeg);

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
